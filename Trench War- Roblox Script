if getgenv().executed then return end
getgenv().executed = true

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local AimbotEnabled = false
local TeammateCheck = false
local WallCheck = true
local Holding = false
local FOV = 200
local FlyGuiEnabled = false
local ToggleKey = Enum.KeyCode.RightShift
local UIVisible = true
local HitboxEnabled = false
local HitboxConnection
_G.ESPToggle = false
local colourChosen = Color3.fromRGB(255, 255, 0)

local function IsTeammate(player)
    return player.Team == LocalPlayer.Team
end

local function IsVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * 1000
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(origin, direction, raycastParams)
    return result and result.Instance:IsDescendantOf(targetPart.Parent)
end

local function GetClosestPlayer()
    local closest = nil
    local shortest = FOV
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if TeammateCheck and IsTeammate(player) then continue end
            local pos, visible = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if not visible then continue end
            local dist = (Vector2.new(pos.X, pos.Y) - UserInputService:GetMouseLocation()).Magnitude
            if dist < shortest then
                if WallCheck and not IsVisible(player.Character.HumanoidRootPart) then continue end
                shortest = dist
                closest = player
            end
        end
    end
    return closest
end

RunService.RenderStepped:Connect(function()
    if AimbotEnabled and Holding then
        local target = GetClosestPlayer()
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Character.HumanoidRootPart.Position)
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = true
    elseif input.KeyCode == ToggleKey then
        UIVisible = not UIVisible
        game:GetService("CoreGui"):FindFirstChild("KavoUI").Enabled = UIVisible
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = false
    end
end)

-- GUI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Voltex - " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name, "DarkTheme")

-- Main Tab
local MainTab = Window:NewTab("Main")
local MainSection = MainTab:NewSection("Weapons")

MainSection:NewDropdown("Select Weapon", "Choose a weapon to equip", {"Machine Gun", "Mortar", "Sniper"}, function(selected)
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    local weaponFolder = game:GetService("ReplicatedStorage"):FindFirstChild("Weapons")
    if backpack and weaponFolder then
        local weapon = weaponFolder:FindFirstChild(selected)
        if weapon then
            weapon:Clone().Parent = backpack
        end
    end
end)

-- Aimbot Section (inside Main now)
local AimbotSection = MainTab:NewSection("Aimbot")

AimbotSection:NewToggle("Enable Aimbot", "", function(t)
    AimbotEnabled = t
end)

AimbotSection:NewToggle("Teammate Check", "", function(t)
    TeammateCheck = t
end)

AimbotSection:NewToggle("Wall Check", "", function(t)
    WallCheck = t
end)

-- ESP Section
local ESPSection = MainTab:NewSection("ESP")

ESPSection:NewToggle("Name", "", function(t)
    _G.NameESP = t
end)

ESPSection:NewToggle("Health", "", function(t) end)
ESPSection:NewToggle("Boxes", "", function(t) end)
ESPSection:NewToggle("Tracers", "", function(t) end)

ESPSection:NewToggle("Highlight", "", function(t)
    _G.ESPToggle = t
end)

-- Modz Tab
local ModzTab = Window:NewTab("Modz")
local ModzSection = ModzTab:NewSection("Utilities")

ModzSection:NewToggle("HitBox Expander", "", function(t)
    if t then
        HitboxEnabled = true
        _G.HeadSize = 20
        _G.Disabled = false
        HitboxConnection = RunService.RenderStepped:Connect(function()
            for _, v in pairs(Players:GetPlayers()) do
                if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    pcall(function()
                        v.Character.HumanoidRootPart.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
                        v.Character.HumanoidRootPart.Transparency = 0.7
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                        v.Character.HumanoidRootPart.Material = Enum.Material.Neon
                        v.Character.HumanoidRootPart.CanCollide = false
                    end)
                end
            end
        end)
    else
        if HitboxConnection then
            HitboxConnection:Disconnect()
            HitboxConnection = nil
        end
        _G.Disabled = true
    end
end)

ModzSection:NewToggle("FlyGui", "", function(t)
    if t and not FlyGuiEnabled then
        FlyGuiEnabled = true
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end
end)

ModzSection:NewToggle("GodMode", "", function(t)
    if t then
        print("Enable godmode here")
    end
end)

-- Settings Tab
local SettingTab = Window:NewTab("Settings")
local SettingSection = SettingTab:NewSection("UI Options")

SettingSection:NewTextBox("Toggle Key", "1 character only (ex: Z)", function(txt)
    local key = txt:upper():sub(1, 1)
    local foundKey = Enum.KeyCode[key]
    if foundKey then
        ToggleKey = foundKey
    end
end)

-- Highlight ESP logic
local function getCharacter(player)
    return workspace:FindFirstChild(player.Name)
end

local function addHighlightToCharacter(player, character)
    if player == LocalPlayer then return end
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart and not humanoidRootPart:FindFirstChild("Highlight") then
        local highlightClone = Instance.new("Highlight")
        highlightClone.Name = "Highlight"
        highlightClone.Adornee = character
        highlightClone.Parent = humanoidRootPart
        highlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlightClone.FillColor = colourChosen
        highlightClone.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlightClone.FillTransparency = 0.5
    end
end

local function removeHighlightFromCharacter(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local highlightInstance = humanoidRootPart:FindFirstChild("Highlight")
        if highlightInstance then
            highlightInstance:Destroy()
        end
    end
end

local function updateHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        local character = getCharacter(player)
        if character then
            if _G.ESPToggle then
                addHighlightToCharacter(player, character)
            else
                removeHighlightFromCharacter(character)
            end
        end
    end
end

RunService.RenderStepped:Connect(updateHighlights)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if _G.ESPToggle then
            addHighlightToCharacter(player, character)
        end
    end)
end)

Players.PlayerRemoving:Connect(function(playerRemoved)
    local character = playerRemoved.Character
    if character then
        removeHighlightFromCharacter(character)
    end
end)

-- Name ESP
local function addNameESP(player)
    if not player.Character or player == LocalPlayer then return end
    local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Adornee = humanoidRootPart
        billboardGui.Size = UDim2.new(0, 200, 0, 50)
        billboardGui.StudsOffset = Vector3.new(0, 2, 0)
        billboardGui.Parent = humanoidRootPart

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Text = player.Name
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextStrokeTransparency = 0.5
        nameLabel.TextSize = 16
        nameLabel.Parent = billboardGui
    end
end

local function removeNameESP(player)
    if player.Character then
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local billboardGui = humanoidRootPart:FindFirstChildOfClass("BillboardGui")
            if billboardGui then
                billboardGui:Destroy()
            end
        end
    end
end

-- Enable/Disable Name ESP based on toggle
RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if _G.NameESP then
            addNameESP(player)
        else
            removeNameESP(player)
        end
    end
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if _G.NameESP then
            addNameESP(player)
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    removeNameESP(player)
end)
